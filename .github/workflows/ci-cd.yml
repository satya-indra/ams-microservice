name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service] # List all your microservices here

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'adopt'

    - name: Build with Maven
      run: mvn -f services/${{ matrix.service }}/pom.xml clean install

    - name: Run tests
      run: mvn -f services/${{ matrix.service }}/pom.xml test

  docker:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service: [user-service] # List all your microservices here

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY }}-${{ matrix.service }}:latest services/${{ matrix.service }}

    - name: Tag Docker image
      run: |
        docker tag ${{ secrets.ECR_REPOSITORY }}-${{ matrix.service }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}-${{ matrix.service }}:latest

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}-${{ matrix.service }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    strategy:
      matrix:
        service: [user-service] # List all your microservices here

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ecs-task-def-${{ matrix.service }}.json
        service: ${{ secrets.ECS_SERVICE }}-${{ matrix.service }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true